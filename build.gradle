plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    // Version List: https://projects.neoforged.net/neoforged/ModDevGradle
    id 'net.neoforged.moddev' version "${mdg_version}"
    id "com.dorongold.task-tree" version "4.0.0"
}

def secrets = new Properties()
def secretsFile = file('secrets.properties')
if (secretsFile.exists()) {
    secretsFile.withInputStream {
        stream -> secrets.load(stream)
    }

    fileTree("secrets").matching {
        include "**/*.properties"
    }.each {
        File file ->
            file.withInputStream {
                stream -> secrets.load(stream)
            }
    }
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

version = "${project.minecraft_version}-${project.mod_major_version}." + (hasProperty("CIVersion") ? CIVersion : mod_version)
group = "tamaized.voidfog"

base {
    archivesName = "VoidFog"
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(21))
    }
}

compileJava.options.compilerArgs << "-Xlint:all,-classfile,-processing,-deprecation,-this-escape" << "-Werror"

neoForge {
    version = project.neoforge_version

    validateAccessTransformers = true

    mods {
        voidfog {
            sourceSet this.sourceSets.main
        }
    }

    unitTest {
        enable()
        testedMod = mods.voidfog
    }

    runs {
        configureEach {
            gameDirectory = project.file('run')
            systemProperty 'forge.logging.console.level', 'debug'
            logLevel = org.slf4j.event.Level.DEBUG
        }

        client {
            client()
            systemProperty 'forge.enabledGameTestNamespaces', mod_id
            programArguments.addAll '--username', secrets.getProperty("username") ?: 'Dev', secrets.getProperty("uuid") ? '--uuid' : '', secrets.getProperty("uuid") ?: ''
        }

        server {
            server()
            systemProperty 'forge.enabledGameTestNamespaces', mod_id
            programArgument '--nogui'
        }

        data {
            data()
            gameDirectory = project.file('run-data')
            programArguments.addAll '--mod', mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }
    }
}

repositories {
    mavenLocal()
    maven {
        name 'Jared\'s Maven' // JEI
        url 'https://maven.blamejared.com/'
    }
}

dependencies {
    runtimeOnly "mezz.jei:jei-${project.minecraft_version}-neoforge:${project.jei_version}"

    testImplementation group: 'net.neoforged', name: 'testframework', version: project.neoforge_version
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter', version: '5.10.3'
    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.10.3'
    testImplementation group: 'org.mockito', name: 'mockito-junit-jupiter', version: '5.12.0'
}

test {
    useJUnitPlatform()
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

processResources {
    def version = project.version
    filesMatching("META-INF/neoforge.mods.toml") {
        expand([
                'file': ['jarVersion': "${version}"]
        ])
    }
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "VoidFog",
                "Specification-Vendor"    : "Tamaized",
                "Specification-Version"   : "${version}",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "Tamaized",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

def mavenUser = hasProperty("CIMUser") ? CIMUser : secrets.getProperty("maven_username")
def mavenToken = hasProperty("CIMToken") ? CIMToken : secrets.getProperty("maven_password")

publishing {
    publications {
        create('mavenJava', MavenPublication) {
            afterEvaluate {
                artifact this.project.jar
                artifact this.project.sourceJar
            }
            groupId 'tamaized'
            artifactId this.project.mod_id
        }
    }
    repositories {
        maven {
            url "https://maven.tamaized.com/releases"
            credentials {
                username mavenUser
                password mavenToken
            }
        }
    }
}

tasks.register('sourceJar', Jar) {
    dependsOn 'classes'
    from sourceSets.main.allSource
    archiveClassifier = 'sources'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
